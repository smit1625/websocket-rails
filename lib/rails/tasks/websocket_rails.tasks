namespace :websocket_rails do
  desc 'Start the WebsocketRails standalone server.'
  task :start_server do
    require "thin"
    load "#{Rails.root}/config/initializers/websocket_rails.rb"
    load "#{Rails.root}/config/events.rb"

    options = WebsocketRails.config.thin_options

    warn_if_standalone_not_enabled!

    start_the_server = lambda do
      Thin::Controllers::Controller.new(options).start
      puts "Websocket Rails Standalone Server listening on port #{opts[:port]}"
      if WebsocketRails.config.run_test_server
        Thin::Controllers::Controller.new(
          WebsocketRails.config.thin_defaults(:test)).start
      end
    end
    options[:daemonize] ? fork { start_the_server[] } : start_the_server[]
  end

  desc 'Stop the WebsocketRails standalone server.'
  task :stop_server do
    require "thin"
    load "#{Rails.root}/config/initializers/websocket_rails.rb"
    load "#{Rails.root}/config/events.rb"

    options = WebsocketRails.config.thin_options

    warn_if_standalone_not_enabled!

    Thin::Controllers::Controller.new(options).stop
    if WebsocketRails.config.run_test_server
      options = WebsocketRails.config.thin_defaults(:test)
      Thin::Controllers::Controller.new(options).stop
    end
  end
end

def warn_if_standalone_not_enabled!
  return if WebsocketRails.standalone?
  puts "Fail!"
  puts "You must enable standalone mode in your websocket_rails.rb initializer to use the standalone server."
  exit 1
end
